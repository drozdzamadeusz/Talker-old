@{
    ViewData["Title"] = "Talker";
}

<div class="window-buttons main-window">
    <div class="window-menu-area">
        <div class="window-scrollable scrollable"></div>
        <div class="window-buttons-contianer">

            <div id="button-mi" class="window-button"><i class="zmdi zmdi-window-minimize"></i></div>
            <!--<div id="button-ma" class="window-button"><i class="zmdi zmdi-window-maximize"></i></div>-->
            <div id="button-cl" class="window-button"><i class="zmdi zmdi-close"></i></div>
        </div>
    </div>
</div>

<div class="loader-container" id="loader" style="">
    <div class="loader-content" id="loader-content">
        <div class="lds-dual-ring"></div>
        <div class="lds-text">Loading...</div>
    </div>
</div>


<div class="limiter">
    <div class="container-login100 container-main">
        <div class="wrap-login100 wrap-logged">
            <div class="user-panel-container">
                <div class="user-avatar">
                    <img class="user-avatar-image" id="user-avatar-image" src="">
                </div>
                <div class="user-info-panel ">
                    <div class="user-nick-title">
                        <span id="user-nick-title-text"></span>
                    </div>
                    <div class="user-description text-left" id="main-user-description">
                        <span id="user-description-text"></span>
                    </div>
                </div>
                <div class="user-status-changer user-control-buttons">
                    <span class="status-down"><i class="zmdi zmdi-caret-down"></i></span>

                    <span class="user-status-holder" id="user-status-holder"></span>
                    <div class="main-user-control-buttons-panel user-control-buttons-panel">
                        <ul>
                            <li><a href="#" id="set-status-online" class="set-status-item" data-status-no="0"><i class="zmdi zmdi-circle"></i>Online</a></li>
                            <li><a href="#" id="set-status-letstalk" class="set-status-item" data-status-no="1"><i class="zmdi zmdi-flower"></i>Let’s talk</a></li>
                            <li><a href="#" id="set-status-idle" class="set-status-item" data-status-no="2"><i class="zmdi zmdi-brightness-2"></i>Idle</a></li>
                            <li><a href="#" id="set-status-do-not-distirb" class="set-status-item" data-status-no="3"><i class="zmdi zmdi-minus-circle"></i>Do Not Disturb</a></li>
                            <li><a href="#" id="set-status-invisible" class="set-status-item" data-status-no="4"><i class="zmdi zmdi-dot-circle"></i>Invisible</a></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="colorful-separator"></div>
            <div class="w-full friends-contacts-form user-panel-container" id="contacts-form">
            </div>
            <div class="controls">
                <a class="normal-btn-outline" id="add-friend" href="/" data-remodal-target="add-a-friend-modal">
                    <i class="zmdi  zmdi-plus"></i>
                    Add a friend
                </a>
            </div>
        </div>
    </div>
</div>

<div class="remodal" data-remodal-id="add-a-friend-modal">
    <button data-remodal-action="close" class="remodal-close"></button>
    <h3>Add a friend</h3>
    <label for="new-friend-input">Enter username or e-mail</label>
    <input type="text" class="full-width-border" id="new-friend-input" name="new-friend-input"><br><br>

    <div class="modal-rigth-buttons">
        <button data-remodal-action="confirm" class="remodal-confirm" id="new-friend-btn-confirm">OK</button>
        <button data-remodal-action="cancel" class="remodal-cancel" id="new-friend-btn-canc">Cancel</button>
    </div>
</div>


<div class="remodal" data-remodal-id="remove-friend-modal">
    <button data-remodal-action="close" class="remodal-close"></button>
    <h3>Remove a friend</h3>
    <label>Are you sure you want to remove <span id="remove-friend-username"></span> from your friends list?</label>
    <br><br>
    <div class="modal-rigth-buttons">
        <button data-remodal-action="confirm" class="remodal-confirm" id="remove-friend-btn-confirm">Delete user</button>
        <button data-remodal-action="cancel" class="remodal-cancel" id="remove-friend-btn-cancel">Cancel</button>
    </div>
</div>

<div class="remodal" data-remodal-id="block-friend-modal">
    <button data-remodal-action="close" class="remodal-close"></button>
    <h3>Block a friend</h3>
    <label>Are you sure you want to block <span id="block-friend-username"></span>?</label>
    <br>
    <label style="color: var(--status-do-not-distirb);font-family: Poppins-Medium;font-size: 11px;">
        <i class="zmdi zmdi-alert-triangle" style="font-size: 15px;"></i><span> Blocked user will not be able to send you messages. If you want to unblock a user, add them to your friends list</span>
    </label>
    <br><br>
    <div class="modal-rigth-buttons">
        <button data-remodal-action="confirm" class="remodal-confirm" id="block-friend-btn-confirm">Block user</button>
        <button data-remodal-action="cancel" class="remodal-cancel" id="block-friend-btn-cancel">Cancel</button>
    </div>
</div>

<script>


    (function ($) {

        const { ipcRenderer } = require("electron");

        let loader = $('#loader');
        let loaderContent = $("#loader-content");

        /* REMOVE FRIEND MODAL */

        $(document).on('click', '[data-remodal-target=remove-friend-modal]', function () {
            var username = ($(this).data("user-username"));
            var id = ($(this).data("user-id"));
            $("#remove-friend-username").html(username);
            $("#remove-friend-btn-confirm").attr("data-user-id", id);
        });

        $(document).on('closing', '[data-remodal-id=remove-friend-modal]', function () {
            $("#remove-friend-btn-confirm").attr("data-user-id", 0);
        });


        $("#remove-friend-btn-confirm").on('click', function () {
            var id = ($(this).data("user-id")); 
            ipcRenderer.send("remove-friend", id);
        });



        ipcRenderer.on("remove-friend-reply", (sender, data) => {
            var jsonData = JSON.parse(data);

            if (jsonData.errortype != null) {
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "error"));
            } else {
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "info"));
            }

            loader.show();

            console.log(data);
        });


        /* END OF REMOVE FRIEND MODAL * /


        /* BLOCK FRIEND MODAL */


        $(document).on('click', '[data-remodal-target=block-friend-modal]', function () {
            var username = ($(this).data("user-username"));
            var id = ($(this).data("user-id"));
            $("#block-friend-username").html(username);
            $("#block-friend-btn-confirm").attr("data-user-id", id);
        });


        $(document).on('closing', '[data-remodal-id=block-friend-modal]', function () {
            $("#block-friend-btn-confirm").attr("data-user-id", 0);
        });


        $("#block-friend-btn-confirm").on('click', function () {
            var id = ($(this).data("user-id"));
            ipcRenderer.send("block-friend", id);
        });


        ipcRenderer.on("block-friend-reply", (sender, data) => {
            var jsonData = JSON.parse(data);

            if (jsonData.errortype != null) {
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "error", jsonData.status));
            } else {
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "info"));
            }

            loader.show();

            console.log(data);
        });


        /* END OF BLOCK FRIEND MODAL * /



        /* ADD A NEW FRIEND MODAL */

        $(document).on('opening', '[data-remodal-id=add-a-friend-modal]', function () {
            $("#new-friend-input").val("");
        });


        $("#new-friend-btn-confirm").on("click", function () {
            ipcRenderer.send("add-new-friend", $("#new-friend-input").val());
        });


        ipcRenderer.on("add-new-friend-reply", (sender, data) => {
            var jsonData = JSON.parse(data);

            if (jsonData.errortype != null) {
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "error", jsonData.status));
            } else {
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "info"));
            }

            loader.show();

            console.log(data);
        });

        /* END OF ADD A NEW FRIEND MODAL */

        let currentDescription = "";

        let contactsContainer = $("#contacts-form");

        ipcRenderer.on("user-profile-clear-contacts-list", (sender, data) => {
            contactsContainer.html("");
        });

        ipcRenderer.on("user-profile-reply", (sender, data) => {
            console.log(data);

            setTimeout(async function () { loader.hide(); }, 1500);

            var profileData = JSON.parse(data);

            $("#user-nick-title-text").html(profileData.username);

            if (profileData.description != null && profileData.description != "") {
                currentDescription = profileData.description;
                $("#user-description-text").html(profileData.description);
            } else {
                currentDescription = "";
                $("#user-description-text").html("Enter your description here...");
            }


            if (profileData.image != null) {
                $("#user-avatar-image").attr("src", profileData.image);
            }

            if (profileData.status != null) {
                $("#user-status-holder").html(userStatusIcon(profileData.status, false));
            } else {
                $("#user-status-holder").html(userStatusIcon(0, false));
            }

            if (contactsContainer.find("friend").length != profileData.contacts.length) {
                contactsContainer.html("");
            }

            if (Object.keys(profileData.contacts).length == 0) {
                if (contactsContainer.find(".no-contacts-info-container").length < 1)
                    contactsContainer.append('<h5 class="no-contacts-info-container"><i class="zmdi zmdi-mood-bad no-contacts-icon"></i><br><span class="no-contacts-text">You have not added any friends yet</span></h5>');
            } else {
                profileData.contacts.forEach(
                    e => {
                        if (contactsContainer.find("friend[data-user-id=" + e.id + "]").length < 1)
                            contactsContainer.append(addFirendToContactsList(e))
                    });
            }
        });



        $('body').on('click', '.open-user-conversation', async function (e) {
            var userId = $(this).data("user-id");

            ipcRenderer.send("show-user-conversation-chat", userId);
        });


        async function getUserProfileData() {
            ipcRenderer.send("user-profile");
        }

        getUserProfileData();


        //** DESCRIPTION AND STATUS *///

        function textAreaUnfocus() {

            if (currentDescription != null && currentDescription != "") {
                $('#main-user-description').html('<span id="user-description-text">' + currentDescription + '</span>');
            } else {
                $('#main-user-description').html('<span id="user-description-text">Enter your description here...</span>');
            }
            
        }

        function setNewDescription(newDescription) {

            ipcRenderer.send("update-description", newDescription);

            currentDescription = newDescription;

            textAreaUnfocus();
        }


        ipcRenderer.on("update-description-reply", (sender, data) => {
            var jsonData = JSON.parse(data);

            if (jsonData.errortype != null) {
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "error", jsonData.status));
                loader.show();
                console.log(data);
            } else {
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "info"));
            }
        });

        $(document).on('click', '#user-description-text', function () {

            var maxLen = 120;

            $('#main-user-description').html('<textarea id="user-description-text-textarea" placeholder="" rows="2">' + currentDescription + '</textarea><span style="display:block;" id="user-description-text-textarea-info"><i class="zmdi zmdi-info"></i><span> Press enter to confirm, unfocus text input to cancel</span></span><span style="display:block;" id="user-description-text-textarea-info-chars"></span>');
            $('#user-description-text-textarea').focus();

            $("#user-description-text-textarea").keypress(function (e) {
                var code = (e.keyCode ? e.keyCode : e.which);
                if (code == 13) {
                    setNewDescription($('#user-description-text-textarea').val());
                }

            });


            $("#user-description-text-textarea").keydown(function (e) {
                var Length = $(this).val().length;
                var AmountLeft = maxLen - Length;
                $('#user-description-text-textarea-info-chars').html(AmountLeft + " characters left");
                if (Length > maxLen && e.keyCode != 8) {
                    e.preventDefault();
                }
            });


            $("#user-description-text-textarea").on('blur', function () {
                textAreaUnfocus();
            });

        });

        $(".user-status-changer").hover(function () {
            $('.main-user-control-buttons-panel').show();
        }, function () {
            $('.main-user-control-buttons-panel').hide();
        });

        $(".set-status-item").on('click', function () {

            var newStatus = $(this).data("status-no");

            $('.main-user-control-buttons-panel').hide();

            ipcRenderer.send("update-status", newStatus);

            $("#user-status-holder").html(userStatusIcon(newStatus, false));
        });


        ipcRenderer.on("update-status-reply", (sender, data)  => {
            var jsonData = JSON.parse(data);

            if (jsonData.errortype != null) {
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "error", jsonData.status));
                loader.show();
                console.log(data);
            } else {
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "info"));
            }
        });


        //** END OF DESCRIPTION AND STATUS *///


        let echoSocketUpdaterInit = async () => {
            ipcRenderer.send("echo-socket-updater-init");
        }

        echoSocketUpdaterInit();


        let echoSocketUpdater = async () => {
            ipcRenderer.send("echo-socket-updater");
        }


        setInterval(async () => {
            echoSocketUpdater();
        }, 2500);



        ipcRenderer.on("echo-socket-updater-replay", (sender, data) => {

            var jsonData = JSON.parse(data);


            if (jsonData.errortype != null) {
                loader.show();
                loader.addClass("socket-error");
                loaderContent.html(showExceptionOnForm(jsonData.error, jsonData.message, "socket-error"));
            } else {
                if (loader.hasClass("socket-error")) {
                    loader.hide();
                    loader.removeClass("socket-error");
                }
            }

            console.log(data);

        });



        $("#button-mi").on("click", function () {

            ipcRenderer.send("minimalize-window", "Main");

        });



        $("#button-cl").on("click", function () {

            ipcRenderer.send("close-window", "Main");

        });

    })(jQuery);
</script>